package main

import (
	"io/ioutil"
	"log"
	"runtime"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var start_keyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîê –®–∏—Ñ—Ä—ã", "code"),
		tgbotapi.NewInlineKeyboardButtonData("üîç –ü–æ–∏—Å–∫", "picsearch"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üÜò –ü–æ–º–æ—â—å", "help"),
	),
)

var code_keyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–¶–µ–∑–∞—Ä—å", "caesar"),
		tgbotapi.NewInlineKeyboardButtonData("–í–∏–∂–µ–Ω–µ—Ä", "vijener"),
	),
)

func main() {
	tokenContent, err := ioutil.ReadFile("token.txt")
	if err != nil {
		log.Fatal(err)
	}
	token := string(tokenContent)
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = true
	log.Printf("Authorized on account @%s", bot.Self.UserName)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)
	for update := range updates {
		if update.CallbackQuery != nil {
			chatID := update.CallbackQuery.Message.Chat.ID
			data := update.CallbackQuery.Data
			msg := tgbotapi.NewMessage(chatID, "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ "+data)
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data)
			if _, err := bot.Request(callback); err != nil {
				panic(err)
			}

			switch data {
			case "code":
				msg.ReplyMarkup = code_keyboard
			case "picsearch":
				msg.Text = "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞"
			case "help":
				msg.Text = "–ö–æ–º–∞–Ω–¥—ã:\n\n/author ‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞\n/v ‚Äî runtime environment\n/time ‚Äî –≤—Ä–µ–º—è –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ (GMT+7)\n/date ‚Äî  —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞"
			}

			if _, err = bot.Send(msg); err != nil {
				panic(err)
			}
		}
		if update.Message == nil {
			continue
		}
		chatID := update.Message.Chat.ID
		msg := tgbotapi.NewMessage(chatID, update.Message.Text)
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "help":
				msg.Text = "–ö–æ–º–∞–Ω–¥—ã:\n\n/author ‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞\n/v ‚Äî runtime environment\n/time ‚Äî –≤—Ä–µ–º—è –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ (GMT+7)\n/date ‚Äî  —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞"
			case "start":
				msg.Text = "–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä, –Ω–æ –º–µ–Ω—è –±—ã—Å—Ç—Ä–æ —É—á–∞—Ç –≤—Å–µ–º—É –Ω–æ–≤–æ–º—É!\n\n–í–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã :)"
			case "date":
				currentTime := time.Now()
				day := time.Now().Format("Monday")
				switch day {
				case "Monday":
					day = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
				case "Tuesday":
					day = "–≤—Ç–æ—Ä–Ω–∏–∫"
				case "Wednesday":
					day = "—Å—Ä–µ–¥–∞"
				case "Thursday":
					day = "—á–µ—Ç–≤–µ—Ä–≥"
				case "Friday":
					day = "–ø—è—Ç–Ω–∏—Ü–∞"
				case "Saturday":
					day = "—Å—É–±–±–æ—Ç–∞"
				case "Sunday":
					day = "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
				}
				msg.Text = currentTime.Format("–°–µ–≥–æ–¥–Ω—è 02.01.2006, " + day)
			case "time":
				msg.Text = time.Now().Format("–í—Ä–µ–º—è –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ (GMT+7): 15:04")
			case "v":
				msg.Text = "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ " + runtime.Version()
			case "author":
				msg.Text = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî @allenvox"
			default:
				msg.Text = "–ß—Ç–æ-—Ç–æ —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ /help"
			}
		} else {

		}
		msg.ReplyMarkup = start_keyboard
		if _, err = bot.Send(msg); err != nil {
			panic(err)
		}
	}
}
